
# Start tmux on shell login
if [ -z "$TMUX" ]; then  # Check if not already in a tmux session
	TMUX_SESSION="genesis"
	if tmux has-session -t $TMUX_SESSION 2>/dev/null; then
		tmux attach-session -t $TMUX_SESSION
	else
		tmux new-session -s $TMUX_SESSION
	fi
fi

EDITOR=nvim


autoload -Uz compinit
compinit

source ~/.config/git-alias/git-aliases.zsh
source ~/.config/git-alias/lib/git.zsh


	onf() {
		local dir=$(find ~ ~/Documents ~/.config -type f 2> /dev/null | fzf --reverse --height 35% --preview 'bat --style=numbers --color=always {}')

		if [ -n "$dir" ]; then
			nvim "$dir" && zle reset-prompt 2> /dev/null
		fi
	}

	zle -N onf
	bindkey '^n' onf

	fcd() {
		local dir=$(find ~ ~/Documents ~/.config -type d 2> /dev/null | fzf --reverse --height 35% --preview 'tree -C {} | head -n 10')

		if [ -n "$dir" ]; then
			cd "$dir" && zle reset-prompt 2> /dev/null
		fi
	}

	bindkey -r '^o'
	zle -N fcd
	bindkey '^o' fcd

	setopt autocd              # change directory just by typing its name
	setopt correct            # auto correct mistakes
	setopt interactivecomments # allow comments in interactive mode
	setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
	setopt nonomatch           # hide error message if there is no match for the pattern
	setopt notify              # report the status of background jobs immediately
	setopt numericglobsort     # sort filenames numerically when it makes sense
	setopt promptsubst         # enable command substitution in prompt

# eval "$(pyenv init --path)"
# eval "$(pyenv init -)"

alias cat='bat --style plain'
alias hp_printer='HP-HP-OfficeJet-Pro-9020-series'
alias pomodoro="i3-gnome-pomodoro"
alias bukuadd='buku -a'
alias ls='ls --color'

alias vim=$(which nvim)

# export SHELL=$(which zsh)
# export BROWSER='firefox'



WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word
# hide EOL sign ('%')
PROMPT_EOL_MARK=""

#
# configure key keybindings
bindkey -e                                        # emacs key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^[[3;5~' kill-word                       # ctrl + Supr
bindkey '^[[3~' delete-char                       # delete
bindkey '^[[1;5C' forward-word                    # ctrl + ->
bindkey '^[[1;5D' backward-word                   # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down
bindkey '^[[H' beginning-of-line                  # home
bindkey '^[[F' end-of-line                        # end
bindkey '^[[Z' undo                               # shift + tab undo last action


# History configurations
HISTFILE=~/.zsh_history
HISTSIZE=5000
SAVEHIST=5000
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it

# force zsh to show the complete history
alias history="history 0"

export FREERDP2_CFLAGS='-I/usr/local/include'
export FREERDP2_LIBS='-I/usr/local/lib/freerdp'

export LDFLAGS="-L/usr/local/opt/openssl@3/lib -L/usr/local/opt/bzip2/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/readline/lib"
export CPPFLAGS="-I/usr/local/opt/openssl@3/include -I/usr/local/opt/zlib/include -I/usr/local/opt/bzip2/include -I/usr/local/opt/readline/include"

export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/readline/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/opt/libxml2/lib/pkgconfig:/opt/X11/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
#export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"

export CONFIGURE_OPTS="CPPFLAGS=-I/usr/local/opt/zlib/include,-I/usr/local/opt/openssl@3/include,-I/usr/local/opt/bzip2/include,-I/usr/local/opt/readline/include LDFLAGS=-L/usr/local/opt/zlib/lib,-L/usr/local/opt/openssl@3/lib,-L/usr/local/opt/bzip2/lib,-L/usr/local/opt/readline/lib"


export GOPATH=`echo $HOME/go`
export PATH="$GOPATH:$PATH"
export PATH="/usr/local/bin:/home/katob/go/bin:/home/katob/.cargo/bin:/home/katob/.local/share/nvim/mason/bin:/usr/local/lib:/usr/local/opt/binutils/bin:/usr/local/opt/inetutils/libexec/gnubin:/usr/local/opt/openssl@3/bin:/usr/local/opt/bzip2/bin:$PATH"
export DYLD_LIBRARY_PATH="/usr/local/lib/"


export PATH=/opt/cuda/bin:$PATH
export LD_LIBRARY_PATH=/opt/cuda/lib64:$LD_LIBRARY_PATH

# export CLICOLOR=1
# export LSCOLORS=Eafxcxdxbxegedabagacad



# # jdk() {
# #         version=$1
# #         export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
# #         java -version
# #  }


if [[ $(uname) == "Darwin" ]] then
	# [[ -s "/Users/katob/.gvm/scripts/gvm" ]] && source "/Users/katob/.gvm/scripts/gvm"
elif [[ $(uname) == "Linux" ]] then
	[[ -s "/home/katob/.gvm/scripts/gvm" ]] && source "/home/katob/.gvm/scripts/gvm"
fi


if [[ $(uname) == "Linux" ]] then
	__conda_setup="$('/home/katob/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
		eval "$__conda_setup"
	else
		if [ -f "/home/katob/miniconda3/etc/profile.d/conda.sh" ]; then
			. "/home/katob/miniconda3/etc/profile.d/conda.sh"
		else
			export PATH="/home/katob/miniconda3/bin:$PATH"
		fi
	fi
	unset __conda_setup
fi


# Enable command auto-completion
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors 'bg=green,fg=white,bold'
zstyle ':completion:*' menu select=2
# eval "$(compaudit | xargs chmod g-w,o-w)"
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*' completion:*:manuals.*:manuals' format ' %d'
zstyle ':completion:*' completion:*:descriptions' format ' %B%d%b'

eval "$(starship init zsh)"
